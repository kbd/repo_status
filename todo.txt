√ * copy over templates from python
√   - change colors to use nim's color module
* print basic status using templates in printRepoStatus
√ * add ahead/behind
√   - figure out the git call to make
√   - shell out to it
√   - add it to the status dictionary
√ * add repo state
√   - copy over the logic from python that checks for files in .git
√   - handle it separately from status since it's a string and it's only one thing
√ * add stashes
* check if there's anything else the python does you haven't covered
√ * handle return codes, in case of "not a repository" or other errors
* make it embeddable in a prompt
  - by default inspect $SHELL (how to read env vars in nim?)
    and don't depend on 'current_shell' script
  - add a command line parameter to specify the shell manually to override
  - support zsh and bash, copy over the escape codes from python
* now that it should be feature-parity with the python, run hyperfine on both and compare
* run both versions of repo_status on every repository on your computer to see if output differs
* remove python version from repository and merge nim to master
* update your "setup manual" to install the nim version and replace the python version in your prompt
* update the readme for the nim version, include install/build instructions
* check if there's anything else you need to cover
  - any ideas you want to borrow from 'gitstatus'
    - tags?
    - optional hash (I don't want it, but it could be exposed to a custom format?)
  - are there any other git states you haven't covered? also consult gitps1 again.
* investigate async/threading/spawn to run all git commands (and maybe your git state check) concurrently
  - time it vs old to see if that reduces runtime significantly
  - are Nim tables thread-safe? *your* code should have no race conditions because
    each thread would write to different keys in the table.
    Alternatively, could just return tables and merge them.
* make it possible to customize the format.
  - an env var like REPO_STATUS_FORMAT="{state} {green}↑{ahead}{red}↓{behind}...{branch}"
    - and/or a command-line parameter, --format -f (change -f to --fake... implement that btw)
  - the keywords are made up from {StatusCode | nim color code}
    - document the full list in the usage
    - can you generate it with reflection in Nim?
  - any spaces are trimmed before output
* add a json output format (-j/--json)

next:
* homebrew package?
* rewrite prompt in Nim if this was fun and you think it'd be faster/shorter/cleaner than shell
